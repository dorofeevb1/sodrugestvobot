import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from companies_data import CompanyDataParser
import pandas as pd
from datetime import datetime
import os
from users_info import save_user_info, get_all_users
from logger import activity_logger, logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7631678487:AAEDXa77p9hNOtf7Z2NVPq-fJjB6Sl9s2ck'
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProductStates(StatesGroup):
    waiting_for_link = State()

def read_parsed_data():
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('parsed_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return {}

def add_link_to_file(link: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª links.txt"""
    try:
        with open('links.txt', 'a', encoding='utf-8') as f:
            f.write(f"\n{link}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")
        return False

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"),
                KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
            ],
            [
                KeyboardButton(text="üìà –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"),
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard

def create_product_card(item_data: dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    platform_emoji = "üõçÔ∏è" if item_data.get('platform') == 'Ozon' else "üõí"
    discount = ""
    if item_data.get('price_with_discount') and item_data.get('price_without_discount'):
        try:
            price_with = float(item_data['price_with_discount'].replace('‚ÇΩ', '').replace(' ', '').strip())
            price_without = float(item_data['price_without_discount'].replace('‚ÇΩ', '').replace(' ', '').strip())
            if price_without > price_with:
                discount_percent = int((1 - price_with / price_without) * 100)
                discount = f"\nüéØ *–°–∫–∏–¥–∫–∞:* {discount_percent}%"
        except:
            pass

    return (
        f"{platform_emoji} *{item_data.get('platform', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}*\n\n"
        f"üì¶ *–ù–∞–∑–≤–∞–Ω–∏–µ:*\n{item_data.get('product_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"üí∞ *–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:* {item_data.get('price_with_discount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üíµ *–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏:* {item_data.get('price_without_discount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        f"{discount}\n"
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    activity_logger.log_user_info(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    activity_logger.log_user_action(
        message.from_user.id,
        "start_command",
        {"chat_id": message.chat.id}
    )
    
    # Create keyboard buttons
    buttons = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìà –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    
    # Create keyboard markup
    markup = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–∫–∏–¥–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )

@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    """Show detailed statistics about bot users"""
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    activity_logger.log_user_action(
        message.from_user.id,
        "stats_command",
        {"chat_id": message.chat.id}
    )
    
    stats = activity_logger.get_all_stats()
    if not stats:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")
        return
    
    stats_text = "üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    for user_id, data in stats.items():
        user_info = data.get('user_info', {})
        stats_text += f"*ID:* {user_id}\n"
        stats_text += f"*–ò–º—è:* {user_info.get('first_name', '–ù–µ—Ç')}\n"
        stats_text += f"*–§–∞–º–∏–ª–∏—è:* {user_info.get('last_name', '–ù–µ—Ç')}\n"
        stats_text += f"*Username:* @{user_info.get('username', '–ù–µ—Ç')}\n"
        stats_text += f"*–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫:* {data.get('first_seen', '–ù–µ—Ç')}\n"
        stats_text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:* {data.get('last_seen', '–ù–µ—Ç')}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–π—Å—Ç–≤–∏–π
        actions = data.get('actions', [])
        stats_text += f"*–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:* {len(actions)}\n"
        if actions:
            stats_text += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n"
            for action in actions[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–µ–π—Å—Ç–≤–∏—è
                stats_text += f"‚Ä¢ {action['action']} ({action['timestamp']})\n"
        
        stats_text += "-------------------\n"
    
    await message.answer(stats_text, parse_mode="Markdown")

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–º–æ—â–∏"""
    activity_logger.log_user_action(
        message.from_user.id,
        "help_button",
        {"chat_id": message.chat.id}
    )
    await message.answer(
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "1Ô∏è‚É£ *–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ*\n"
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏\n\n"
        "2Ô∏è‚É£ *–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä*\n"
        "–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:\n"
        "‚Ä¢ Ozon\n"
        "‚Ä¢ Wildberries\n\n"
        "3Ô∏è‚É£ *–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑*\n"
        "–°–æ–∑–¥–∞–µ—Ç Excel-—Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö\n\n"
        "‚ùì *–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —Å Ozon –∏–ª–∏ Wildberries\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥\n"
        "‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        parse_mode="Markdown"
    )

@dp.message(lambda message: message.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def show_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    activity_logger.log_user_action(
        message.from_user.id,
        "show_data_button",
        {"chat_id": message.chat.id}
    )
    data = read_parsed_data()
    if not data:
        await message.answer(
            "üì≠ *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'",
            parse_mode="Markdown"
        )
        return
    
    await message.answer(
        "üîÑ *–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...*\n\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data)}",
        parse_mode="Markdown"
    )
    
    for url, item_data in data.items():
        text = create_product_card(item_data)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä", url=url)]
            ]
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@dp.message(lambda message: message.text == "üìà –°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
async def download_analysis(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    activity_logger.log_user_action(
        message.from_user.id,
        "download_analysis_button",
        {"chat_id": message.chat.id}
    )
    try:
        data = read_parsed_data()
        if not data:
            await message.answer(
                "üì≠ *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'",
                parse_mode="Markdown"
            )
            return
        
        await message.answer("‚è≥ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...*", parse_mode="Markdown")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame.from_dict(data, orient='index')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞
        df['date_analyzed'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        filename = f'analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        
        try:
            df.to_excel(filename, index=True, engine='openpyxl')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            from aiogram.types import FSInputFile
            file = FSInputFile(filename)
            await message.answer_document(
                document=file,
                caption="üìä *–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º*\n\n"
                       "üìã –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                       "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
                       "‚Ä¢ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
                       "‚Ä¢ –°–∫–∏–¥–∫–∏\n"
                       "‚Ä¢ –î–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞",
                parse_mode="Markdown"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
            await message.answer(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞:*\n{str(e)}",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await message.answer(
            f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞:*\n{str(e)}",
            parse_mode="Markdown"
        )

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    activity_logger.log_user_action(
        message.from_user.id,
        "add_product_button",
        {"chat_id": message.chat.id}
    )
    await message.answer(
        "üîó *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä*\n\n"
        "üìå *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:*\n"
        "‚Ä¢ üõçÔ∏è Ozon\n"
        "‚Ä¢ üõí Wildberries\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —Å —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥",
        parse_mode="Markdown"
    )
    await state.set_state(ProductStates.waiting_for_link)

@dp.message(ProductStates.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    link = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
    if not (link.startswith('https://www.ozon.ru/') or link.startswith('https://www.wildberries.ru/')):
        await message.answer(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!*\n\n"
            "üìå *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:*\n"
            "‚Ä¢ üõçÔ∏è Ozon\n"
            "‚Ä¢ üõí Wildberries\n\n"
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤",
            parse_mode="Markdown"
        )
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª
    if add_link_to_file(link):
        status_message = await message.answer(
            "‚è≥ *–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞...*\n\n"
            "üîÑ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n"
            "‚è±Ô∏è –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥",
            parse_mode="Markdown"
        )
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞
        parser = CompanyDataParser()
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            platform = "Wildberries" if "wildberries" in link else "Ozon"
            platform_emoji = "üõí" if platform == "Wildberries" else "üõçÔ∏è"
            
            await status_message.edit_text(
                f"‚è≥ *–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —Å {platform_emoji} {platform}...*\n\n"
                "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
                "‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
                parse_mode="Markdown"
            )
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            data = parser.parse_wb_page(link) if 'wildberries' in link else parser.parse_ozon_page(link)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            current_data = read_parsed_data()
            current_data[link] = data
            with open('parsed_data.json', 'w', encoding='utf-8') as f:
                json.dump(current_data, f, ensure_ascii=False, indent=2)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = create_product_card(data)
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä", url=link)]
                ]
            )
            
            await status_message.edit_text(
                "‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–ø–∞—Ä—Å–µ–Ω!*\n\n" + text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            await status_message.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞:*\n{str(e)}",
                parse_mode="Markdown"
            )
    else:
        await message.answer(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.*",
            parse_mode="Markdown"
        )
    
    await state.clear()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main()) 