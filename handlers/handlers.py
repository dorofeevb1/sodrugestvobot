from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telethon import TelegramClient
import json
import logging
from datetime import datetime
from config import BOT_TOKEN, API_ID, API_HASH, SESSIONS_DIR, DATA_DIR
from parsers.marketplace_parser import parse_product
import os
from typing import Dict, Optional, Union
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError

from .keyboards import (
    get_main_keyboard,
    get_consent_keyboard,
    get_share_phone_keyboard,
    get_chats_keyboard
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(SESSIONS_DIR, exist_ok=True)
os.makedirs(DATA_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
telethon_client = None

async def init_telethon_client(phone: str) -> Optional[TelegramClient]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        session_file = os.path.join(SESSIONS_DIR, f"{phone}.session")
        client = TelegramClient(session_file, API_ID, API_HASH)
        await client.connect()
        
        if not await client.is_user_authorized():
            logging.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {phone}")
            return None
            
        return client
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
        return None

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram User Activity Bot!*\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤–∞—à–∏—Ö —á–∞—Ç–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.\n\n"
        "üìã *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ üìä –°–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ üë• –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤\n"
        "‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö\n"
        "‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n"
        "üìù *–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:*\n\n"
        "1Ô∏è‚É£ *–°–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
        "   ‚Ä¢ üë§ –í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, username)\n"
        "   ‚Ä¢ üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö\n"
        "   ‚Ä¢ üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n\n"
        "2Ô∏è‚É£ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:*\n"
        "   ‚Ä¢ üîß –£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        "   ‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "   ‚Ä¢ üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "3Ô∏è‚É£ *–í–∞—à–∏ –ø—Ä–∞–≤–∞:*\n"
        "   ‚Ä¢ üîÑ –û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
        "   ‚Ä¢ üóë –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "   ‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "‚ùì *–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö?*"
    )
    
    await message.answer(welcome_text, reply_markup=get_consent_keyboard(), parse_mode="Markdown")

async def process_consent(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_query.from_user.id
    
    if callback_query.data == "consent_yes":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        save_user_info(user_id, callback_query.from_user)
        
        success_text = (
            "‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!*\n\n"
            "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
            "üì± *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
            "‚Ä¢ üì± –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã\n"
            "‚Ä¢ ‚ùå –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üîç *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:*"
        )
        
        await callback_query.message.edit_text(success_text, reply_markup=None, parse_mode="Markdown")
        await callback_query.message.answer("üëá", reply_markup=get_main_keyboard())
        
    else:
        decline_text = (
            "‚ùå *–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n"
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.\n\n"
            "‚ÑπÔ∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ."
        )
        
        await callback_query.message.edit_text(decline_text, reply_markup=None, parse_mode="Markdown")

async def show_user_data(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = load_user_data(user_id)
    
    if not user_data:
        no_data_text = (
            "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*\n\n"
            "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–∞—á–Ω—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."
        )
        await message.answer(no_data_text, parse_mode="Markdown")
        return
    
    data_text = "üìä *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = user_data.get('user_info', {})
    data_text += "üë§ *–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
    data_text += f"‚Ä¢ üÜî ID: `{user_id}`\n"
    data_text += f"‚Ä¢ üë§ –ò–º—è: {user_info.get('first_name', '–ù–µ—Ç')}\n"
    data_text += f"‚Ä¢ üë• –§–∞–º–∏–ª–∏—è: {user_info.get('last_name', '–ù–µ—Ç')}\n"
    data_text += f"‚Ä¢ üì± Username: @{user_info.get('username', '–ù–µ—Ç')}\n"
    data_text += f"‚Ä¢ üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{user_info.get('phone_number', '–ù–µ—Ç')}`\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
    chats = user_data.get('chats', [])
    if chats:
        data_text += "üí¨ *–í–∞—à–∏ —á–∞—Ç—ã:*\n"
        for chat in chats:
            data_text += f"‚Ä¢ {chat.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            if chat.get('members_count'):
                data_text += f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat['members_count']}\n"
        data_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = user_data.get('stats', {})
    if stats:
        data_text += "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        data_text += f"‚Ä¢ üìÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {stats.get('first_seen', '–ù–µ—Ç')}\n"
        data_text += f"‚Ä¢ üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {stats.get('last_seen', '–ù–µ—Ç')}\n"
        data_text += f"‚Ä¢ üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}\n\n"
    
    try:
        await message.answer(data_text, reply_markup=get_chats_keyboard(), parse_mode="Markdown")
    except Exception as e:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
        await message.answer(
            "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n" + data_text.replace("*", "").replace("_", ""),
            reply_markup=get_chats_keyboard()
        )

async def process_get_chats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    try:
        if not telethon_client:
            await callback.answer(
                "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        dialogs = await telethon_client.get_dialogs()
        
        if not dialogs:
            await callback.answer(
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤",
                show_alert=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats_list = "üì± *–í–∞—à–∏ —á–∞—Ç—ã:*\n\n"
        for dialog in dialogs[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —á–∞—Ç–æ–≤
            if dialog.name:
                chats_list += f"‚Ä¢ {dialog.name}\n"
        
        if len(dialogs) > 10:
            chats_list += f"\n...–∏ –µ—â–µ {len(dialogs) - 10} —á–∞—Ç–æ–≤"

        await callback.message.edit_text(
            chats_list,
            reply_markup=get_chats_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {str(e)}")
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤",
            show_alert=True
        )

async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        if not message.contact or not message.contact.phone_number:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_share_phone_keyboard()
            )
            return

        phone = message.contact.phone_number
        if not phone.startswith('+'):
            phone = '+' + phone

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        session_file = os.path.join(SESSIONS_DIR, f"{phone}.session")
        client = TelegramClient(session_file, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await message.answer(
                "üì± *–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n"
                "–ö–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram",
                parse_mode="Markdown"
            )
            await state.set_state("waiting_for_code")
            await state.update_data(phone=phone, client=client)
            return

        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        global telethon_client
        telethon_client = client

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'phone': phone,
            'first_name': message.contact.first_name,
            'last_name': message.contact.last_name,
            'user_id': message.contact.user_id,
            'consent_given': True,
            'consent_date': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        user_file = os.path.join(DATA_DIR, f"user_{message.from_user.id}.json")
        with open(user_file, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)

        await message.answer(
            "‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

async def process_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        phone = data.get('phone')
        client = data.get('client')
        
        if not phone or not client:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
            await client.sign_in(phone, message.text)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            global telethon_client
            telethon_client = client

            await message.answer(
                "‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
            
        except PhoneCodeInvalidError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )
            return
            
        except SessionPasswordNeededError:
            await message.answer(
                "üîê *–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                parse_mode="Markdown"
            )
            await state.set_state("waiting_for_password")
            return
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞: {str(e)}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        client = data.get('client')
        
        if not client:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º
            await client.sign_in(password=message.text)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
            global telethon_client
            telethon_client = client

            await message.answer(
                "‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="Markdown"
            )
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

async def get_user_chats(message: types.Message, user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not telethon_client:
            error_text = (
                "‚ùå *–û—à–∏–±–∫–∞*\n\n"
                "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await message.answer(error_text, parse_mode="Markdown")
            return
            
        loading_text = (
            "üîÑ *–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...*\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        status_message = await message.answer(loading_text, parse_mode="Markdown")
        
        chats = []
        async for dialog in telethon_client.iter_dialogs():
            try:
                entity = dialog.entity
                chat_info = {
                    'id': entity.id,
                    'title': getattr(entity, 'title', None) or getattr(entity, 'first_name', 'Unknown'),
                    'type': 'channel' if getattr(entity, 'broadcast', False) else 'group' if getattr(entity, 'megagroup', False) else 'private',
                    'members_count': getattr(entity, 'participants_count', None),
                    'username': getattr(entity, 'username', None)
                }
                
                if chat_info['title']:
                    chats.append(chat_info)
                    
            except Exception as e:
                logging.error(f"Error processing dialog: {str(e)}")
                continue
        
        if not chats:
            no_chats_text = (
                "üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤*\n\n"
                "‚ÑπÔ∏è –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —á–∞—Ç–∞–º–∏, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º."
            )
            await status_message.edit_text(no_chats_text, parse_mode="Markdown")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üì± *–í–∞—à–∏ —á–∞—Ç—ã:*\n\n"
        for chat in chats:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
            chat_emoji = "üì¢" if chat['type'] == 'channel' else "üë•" if chat['type'] == 'group' else "üë§"
            
            text += f"{chat_emoji} *{chat['title']}*"
            if chat['username']:
                text += f" (@{chat['username']})"
            if chat['members_count']:
                text += f"\n   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat['members_count']}"
            text += "\n\n"
        
        await status_message.edit_text(text, parse_mode="Markdown")
        
    except Exception as e:
        error_text = (
            "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤*\n\n"
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n`{str(e)}`\n\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await message.answer(error_text, parse_mode="Markdown")

def save_user_info(user_id: int, user: types.User, phone: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = str(user_id)
    data_file = f'{DATA_DIR}/user_{user_id}.json'
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            data = {'user_info': {}, 'actions': []}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        data['user_info'].update({
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'phone_number': phone,
            'last_updated': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            
    except Exception as e:
        logging.error(f"Error saving user info: {str(e)}")

def load_user_data(user_id: int) -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(user_id)
    data_file = f'{DATA_DIR}/user_{user_id}.json'
    
    try:
        with open(data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_session(user_id: int, phone: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
    session_file = f'{SESSIONS_DIR}/session_{user_id}.json'
    
    try:
        session_info = {
            'user_id': user_id,
            'phone': phone,
            'session_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        with open(session_file, 'w') as f:
            json.dump(session_info, f)
        return True
    except Exception as e:
        logging.error(f"Error saving session: {str(e)}")
        return False

async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    link = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
    if not (link.startswith('https://www.ozon.ru/') or link.startswith('https://www.wildberries.ru/')):
        await message.answer(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!*\n\n"
            "üìå *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:*\n"
            "‚Ä¢ üõçÔ∏è Ozon\n"
            "‚Ä¢ üõí Wildberries\n\n"
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤",
            parse_mode="Markdown"
        )
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª
    if add_link_to_file(link):
        status_message = await message.answer(
            "‚è≥ *–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞...*\n\n"
            "üîÑ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n"
            "‚è±Ô∏è –û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥",
            parse_mode="Markdown"
        )
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            platform = "Wildberries" if "wildberries" in link else "Ozon"
            platform_emoji = "üõí" if platform == "Wildberries" else "üõçÔ∏è"
            
            await status_message.edit_text(
                f"‚è≥ *–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ —Å {platform_emoji} {platform}...*\n\n"
                "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
                "‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
                parse_mode="Markdown"
            )
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            data = await parse_product(link)
            
            if not data:
                await status_message.edit_text(
                    "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞*\n\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode="Markdown"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            current_data = read_parsed_data()
            current_data[link] = data
            with open('parsed_data.json', 'w', encoding='utf-8') as f:
                json.dump(current_data, f, ensure_ascii=False, indent=2)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = create_product_card(data)
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä", url=link)]
                ]
            )
            
            await status_message.edit_text(
                "‚úÖ *–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–ø–∞—Ä—Å–µ–Ω!*\n\n" + text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            await status_message.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞:*\n{str(e)}",
                parse_mode="Markdown"
            )
    else:
        await message.answer(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.*",
            parse_mode="Markdown"
        )
    
    await state.clear()

def create_product_card(data: Dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        price = f"{data['price']:,.0f}".replace(',', ' ')
        old_price = f"{data['old_price']:,.0f}".replace(',', ' ') if data.get('old_price') else None
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏
        discount = data.get('discount', 0)
        discount_text = f"üéØ *–°–∫–∏–¥–∫–∞:* {discount}%" if discount > 0 else ""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating = data.get('rating', 0)
        stars = "‚≠ê" * int(rating) + "‚òÜ" * (5 - int(rating))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
        reviews = data.get('reviews', 0)
        reviews_text = f"üìù *–û—Ç–∑—ã–≤—ã:* {reviews:,}".replace(',', ' ')
        
        # –°–±–æ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        card = (
            f"üè∑Ô∏è *{data['name']}*\n\n"
            f"üí∞ *–¶–µ–Ω–∞:* {price} ‚ÇΩ"
        )
        
        if old_price:
            card += f"\nüí∏ *–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:* {old_price} ‚ÇΩ"
        
        if discount_text:
            card += f"\n{discount_text}"
        
        if data.get('brand'):
            card += f"\nüè≠ *–ë—Ä–µ–Ω–¥:* {data['brand']}"
        
        if rating > 0:
            card += f"\n\n{stars}"
            card += f"\n{reviews_text}"
        
        return card
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"

def add_link_to_file(link: str) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª links.txt"""
    try:
        with open('links.txt', 'a', encoding='utf-8') as f:
            f.write(f"\n{link}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")
        return False

def read_parsed_data() -> Dict:
    """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('parsed_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

async def show_data(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    data = read_parsed_data()
    if not data:
        await message.answer(
            "üì≠ *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'",
            parse_mode="Markdown"
        )
        return
    
    await message.answer(
        "üîÑ *–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...*\n\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(data)}",
        parse_mode="Markdown"
    )
    
    for url, item_data in data.items():
        text = create_product_card(item_data)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä", url=url)]
            ]
        )
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def download_analysis(message: types.Message):
    """–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    try:
        data = read_parsed_data()
        if not data:
            await message.answer(
                "üì≠ *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'",
                parse_mode="Markdown"
            )
            return
        
        await message.answer("‚è≥ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...*", parse_mode="Markdown")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        import pandas as pd
        df = pd.DataFrame.from_dict(data, orient='index')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞
        df['date_analyzed'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        filename = f'analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
        
        try:
            df.to_excel(filename, index=True, engine='openpyxl')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            from aiogram.types import FSInputFile
            file = FSInputFile(filename)
            await message.answer_document(
                document=file,
                caption="üìä *–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º*\n\n"
                       "üìã –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
                       "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤\n"
                       "‚Ä¢ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
                       "‚Ä¢ –°–∫–∏–¥–∫–∏\n"
                       "‚Ä¢ –î–∞—Ç—É –∞–Ω–∞–ª–∏–∑–∞",
                parse_mode="Markdown"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
            await message.answer(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞:*\n{str(e)}",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await message.answer(
            f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞:*\n{str(e)}",
            parse_mode="Markdown"
        )

async def add_product(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
    await message.answer(
        "üîó *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä*\n\n"
        "üìå *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:*\n"
        "‚Ä¢ üõçÔ∏è Ozon\n"
        "‚Ä¢ üõí Wildberries\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ —Å —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_for_link") 